/*
 * Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
 * */


/// @file
//#include "hwlib.hpp" 
#include "sam.h"
#include "infrared.hpp"
#include "hwlib.hpp"

/// Main function
//
/// The main function where the watchdog is being killed, the object IR from class infrared is being made and initialized. 
/// As long as the program lives, it checks for infrared input
/// 
/// All the variables are being defined at the top of their .cpp files. Add here your pinnumbers. Recommended is not to change these
int main(void){
	/// kill Watchdog
    //
    /// Killing the watchdog, so the program doesn't think it crashes
	WDT->WDT_MR = WDT_MR_WDDIS;
	
	/// Creating infrared object
    //
    /// Created infrared object ir, which is directly initialized by init(); 
    /// infrared(int state); 
	infrared ir(1, hwlib::target::pins::d3);
	ir.init();
    
    /// Infinite for loop
    //
    /// The infrared::drive function receives an integer value from the infrared::check function, which returns a bitpatron converted to a integervalue
    
    
	
    for(;;){
		ir.drive(ir.check());
	}

}